// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "autoFRK_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eigenDecompose
Rcpp::List eigenDecompose(const Eigen::Map<Eigen::MatrixXd> matrix);
RcppExport SEXP _autoFRK_eigenDecompose(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenDecompose(matrix));
    return rcpp_result_gen;
END_RCPP
}
// getSquareRootMatrix
Eigen::MatrixXd getSquareRootMatrix(Eigen::MatrixXd matrix);
RcppExport SEXP _autoFRK_getSquareRootMatrix(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(getSquareRootMatrix(matrix));
    return rcpp_result_gen;
END_RCPP
}
// getInverseSquareRootMatrix
Eigen::MatrixXd getInverseSquareRootMatrix(const Eigen::Map<Eigen::MatrixXd> left_matrix, const Eigen::Map<Eigen::MatrixXd> right_matrix);
RcppExport SEXP _autoFRK_getInverseSquareRootMatrix(SEXP left_matrixSEXP, SEXP right_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type left_matrix(left_matrixSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type right_matrix(right_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(getInverseSquareRootMatrix(left_matrix, right_matrix));
    return rcpp_result_gen;
END_RCPP
}
// computeMrtsRcpp
Rcpp::List computeMrtsRcpp(const Eigen::Map<Eigen::MatrixXd> s, const Eigen::Map<Eigen::MatrixXd> xobs_diag, const int k);
RcppExport SEXP _autoFRK_computeMrtsRcpp(SEXP sSEXP, SEXP xobs_diagSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type xobs_diag(xobs_diagSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMrtsRcpp(s, xobs_diag, k));
    return rcpp_result_gen;
END_RCPP
}
// predictMrtsRcpp
Rcpp::List predictMrtsRcpp(const Eigen::Map<Eigen::MatrixXd> s, const Eigen::Map<Eigen::MatrixXd> xobs_diag, const Eigen::Map<Eigen::MatrixXd> s_new, const int k);
RcppExport SEXP _autoFRK_predictMrtsRcpp(SEXP sSEXP, SEXP xobs_diagSEXP, SEXP s_newSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type xobs_diag(xobs_diagSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type s_new(s_newSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(predictMrtsRcpp(s, xobs_diag, s_new, k));
    return rcpp_result_gen;
END_RCPP
}
// predictMrtsRcppWithBasis
Rcpp::List predictMrtsRcppWithBasis(const Eigen::Map<Eigen::MatrixXd> s, const Eigen::Map<Eigen::MatrixXd> xobs_diag, const Eigen::Map<Eigen::MatrixXd> s_new, const Eigen::Map<Eigen::MatrixXd> BBBH, const Eigen::Map<Eigen::MatrixXd> UZ, const Eigen::Map<Eigen::VectorXd> nconst, const int k);
RcppExport SEXP _autoFRK_predictMrtsRcppWithBasis(SEXP sSEXP, SEXP xobs_diagSEXP, SEXP s_newSEXP, SEXP BBBHSEXP, SEXP UZSEXP, SEXP nconstSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type xobs_diag(xobs_diagSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type s_new(s_newSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type BBBH(BBBHSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type UZ(UZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type nconst(nconstSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(predictMrtsRcppWithBasis(s, xobs_diag, s_new, BBBH, UZ, nconst, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_autoFRK_eigenDecompose", (DL_FUNC) &_autoFRK_eigenDecompose, 1},
    {"_autoFRK_getSquareRootMatrix", (DL_FUNC) &_autoFRK_getSquareRootMatrix, 1},
    {"_autoFRK_getInverseSquareRootMatrix", (DL_FUNC) &_autoFRK_getInverseSquareRootMatrix, 2},
    {"_autoFRK_computeMrtsRcpp", (DL_FUNC) &_autoFRK_computeMrtsRcpp, 3},
    {"_autoFRK_predictMrtsRcpp", (DL_FUNC) &_autoFRK_predictMrtsRcpp, 4},
    {"_autoFRK_predictMrtsRcppWithBasis", (DL_FUNC) &_autoFRK_predictMrtsRcppWithBasis, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_autoFRK(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
